setwd("~/Documents/Spring2018-Project3-Group7/doc")
#color features
library("EBImage")
img_names<-list.files("../data/image/images/")
#img-names<-list.files("../data/")
Rbin<-seq(0,1,length.out =  10)
Gbin<-seq(0,1,length.out = 10)
Bbin<-seq(0,1,length.out = 10)
Hbin<-seq(0,1,length.out =  10)
Sbin<-seq(0,1,length.out = 10)
Vbin<-seq(0,0.005,length.out = 10)
##RGB features
rgb_features<-data.frame(matrix(NA,3000,1001))
colnames(rgb_features)<-c('Image',paste('rbg_',1:1000,sep=""))
rgb_features$Image<-img_names
hsv_features<-data.frame(matrix(NA,3000,1001))
colnames(hsv_features)<-c('Image',paste('hsv_',1:1000,sep=""))
hsv_features$Image<-img_names
for(i in 1:3000){
print(i)
img<-readImage(paste("data/image/images/",img_names[i],sep=""))
if(length(dim(img))!=3){
next
}
img<-resize(img,256,256)
img_mat<-imageData(img)
### RGB
rgb_mat<-img_mat
rgb_df=as.data.frame(table(factor(findInterval(rgb_mat[,,1],Rbin),levels = 1:10),
factor(findInterval(rgb_mat[,,2],Gbin),levels = 1:10),
factor(findInterval(rgb_mat[,,3],Bbin),levels = 1:10)))
rgb_features[i,2:1001]<-rgb_df$Freq/(256^2)
### HSV
dim(img_mat)<-c(256*256,3)
hsv_mat<-rgb2hsv(t(img_mat))
hsv_df=as.data.frame(table(factor(findInterval(hsv_mat[1,],Hbin),levels = 1:10),
factor(findInterval(hsv_mat[2,],Sbin),levels = 1:10),
factor(findInterval(hsv_mat[3,],Vbin),levels = 1:10)))
hsv_features[i,2:1001]<-hsv_df$Freq/(256^2)
}
color_features<-merge(rgb_features,hsv_features,by.x = "Image",by.y="Image")
write.csv(color_features,"../../color_features.csv",row.names = F)
setwd("~/Documents/Spring2018-Project3-Group7/doc")
setwd("~/Documents/Spring2018-Project3-Group7/doc")
#color features
library("EBImage")
img_names<-list.files("../data/image/images/")
#img-names<-list.files("../data/")
Rbin<-seq(0,1,length.out =  10)
Gbin<-seq(0,1,length.out = 10)
Bbin<-seq(0,1,length.out = 10)
Hbin<-seq(0,1,length.out =  10)
Sbin<-seq(0,1,length.out = 10)
Vbin<-seq(0,0.005,length.out = 10)
##RGB features
rgb_features<-data.frame(matrix(NA,3000,1001))
colnames(rgb_features)<-c('Image',paste('rbg_',1:1000,sep=""))
rgb_features$Image<-img_names
hsv_features<-data.frame(matrix(NA,3000,1001))
colnames(hsv_features)<-c('Image',paste('hsv_',1:1000,sep=""))
hsv_features$Image<-img_names
for(i in 1:3000){
print(i)
img<-readImage(paste("data/image/images/",img_names[i],sep=""))
if(length(dim(img))!=3){
next
}
img<-resize(img,256,256)
img_mat<-imageData(img)
### RGB
rgb_mat<-img_mat
rgb_df=as.data.frame(table(factor(findInterval(rgb_mat[,,1],Rbin),levels = 1:10),
factor(findInterval(rgb_mat[,,2],Gbin),levels = 1:10),
factor(findInterval(rgb_mat[,,3],Bbin),levels = 1:10)))
rgb_features[i,2:1001]<-rgb_df$Freq/(256^2)
### HSV
dim(img_mat)<-c(256*256,3)
hsv_mat<-rgb2hsv(t(img_mat))
hsv_df=as.data.frame(table(factor(findInterval(hsv_mat[1,],Hbin),levels = 1:10),
factor(findInterval(hsv_mat[2,],Sbin),levels = 1:10),
factor(findInterval(hsv_mat[3,],Vbin),levels = 1:10)))
hsv_features[i,2:1001]<-hsv_df$Freq/(256^2)
}
color_features<-merge(rgb_features,hsv_features,by.x = "Image",by.y="Image")
write.csv(color_features,"../../color_features.csv",row.names = F)
Rbin<-seq(0,1,length.out =  10)
Gbin<-seq(0,1,length.out = 10)
Bbin<-seq(0,1,length.out = 10)
Hbin<-seq(0,1,length.out =  10)
Sbin<-seq(0,1,length.out = 10)
Vbin<-seq(0,0.005,length.out = 10)
##RGB features
rgb_features<-data.frame(matrix(NA,3000,1001))
colnames(rgb_features)<-c('Image',paste('rbg_',1:1000,sep=""))
rgb_features$Image<-img_names
hsv_features<-data.frame(matrix(NA,3000,1001))
colnames(hsv_features)<-c('Image',paste('hsv_',1:1000,sep=""))
hsv_features$Image<-img_names
for(i in 1:3000){
print(i)
img<-readImage(paste("../data/image/images/",img_names[i],sep=""))
#img<-readImage(paste("../data/",img_names[i],sep=""))
if(length(dim(img))!=3){
next
}
img<-resize(img,256,256)
img_mat<-imageData(img)
### RGB
rgb_mat<-img_mat
rgb_df=as.data.frame(table(factor(findInterval(rgb_mat[,,1],Rbin),levels = 1:10),
factor(findInterval(rgb_mat[,,2],Gbin),levels = 1:10),
factor(findInterval(rgb_mat[,,3],Bbin),levels = 1:10)))
rgb_features[i,2:1001]<-rgb_df$Freq/(256^2)
### HSV
dim(img_mat)<-c(256*256,3)
hsv_mat<-rgb2hsv(t(img_mat))
hsv_df=as.data.frame(table(factor(findInterval(hsv_mat[1,],Hbin),levels = 1:10),
factor(findInterval(hsv_mat[2,],Sbin),levels = 1:10),
factor(findInterval(hsv_mat[3,],Vbin),levels = 1:10)))
hsv_features[i,2:1001]<-hsv_df$Freq/(256^2)
}
gbm_train <- function(data, label, n.trees=250, n.shrinkage=0.1, run.cv=F){
library('gbm')
train_df <- data
train_df$label <- label
if(run.cv){
best.n.trees = cv.gbm(trees = 500, K = 10, train_df = train_df)
best.shrinkage <- n.shrinkage
}
else{
best.n.trees <- n.trees
best.shrinkage <- n.shrinkage
}
cat('best number of tress is: ',best.n.trees)
best_gbm_fit <- gbm(label~ ., data = train_df, interaction.depth = 1,
distribution="multinomial", n.trees = best.n.trees,
shrinkage = best.shrinkage)
return(best_gbm_fit)
}
cv.gbm <- function(trees, K, train_df){
gbmWithCrossValidation = gbm(label~ ., data = train_df, distribution = "multinomial",
n.trees = trees, shrinkage = .1, cv.folds = 10, n.cores = 1)
return(gbm.perf(gbmWithCrossValidation))
}
gbm_test <- function(model_fit,data){
pred <- predict(model_fit, newdata=data, n.trees=model_fit$n.trees, type="response")
pred <- data.frame(pred[,,1])
colnames(pred) <- c('0','1','2')
pred_label <- apply(pred,1,function(x){return(which.max(x)-1)})
return(pred_label)
}
gbm_train <- function(data, label, n.trees=250, n.shrinkage=0.1, run.cv=F){
library('gbm')
train_df <- data
train_df$label <- label
if(run.cv){
best.n.trees = cv.gbm(trees = 500, K = 10, train_df = train_df)
best.shrinkage <- n.shrinkage
}
else{
best.n.trees <- n.trees
best.shrinkage <- n.shrinkage
}
cat('best number of tress is: ',best.n.trees)
best_gbm_fit <- gbm(label~ ., data = train_df, interaction.depth = 1,
distribution="multinomial", n.trees = best.n.trees,
shrinkage = best.shrinkage)
return(best_gbm_fit)
}
cv.gbm <- function(trees, K, train_df){
gbmWithCrossValidation = gbm(label~ ., data = train_df, distribution = "multinomial",
n.trees = trees, shrinkage = .1, cv.folds = 10, n.cores = 1)
return(gbm.perf(gbmWithCrossValidation))
}
gbm_test <- function(model_fit,data){
pred <- predict(model_fit, newdata=data, n.trees=model_fit$n.trees, type="response")
pred <- data.frame(pred[,,1])
colnames(pred) <- c('0','1','2')
pred_label <- apply(pred,1,function(x){return(which.max(x)-1)})
return(pred_label)
}
color_train <- read.csv("../output/color_features.csv",as.is = T)[,-1]
label_train <- as.vector(read.csv("../data/image/label_train.csv",as.is = T)[,3])
label_train <- label_train - 1
set.seed(1)
train_index <- sort(sample(1:length(label_train),0.7*length(label_train)))
train_df5 <- data.frame(color_train[train_index,])
train_df5$label <- label_train[train_index]
test_df5 <- data.frame(color_train[-train_index,])
#test_df5$label <- label_train[-train_index]
tm_gbm_train <- system.time(gbm_color_fit_subset <- gbm_train(train_df5,train_df5$label, n.trees=441, run.cv = F))
#color features
library("EBImage")
#img_names<-list.files("../data/image/images/")
img-names<-list.files("../data/test_set/images")
img-names<-list.files("../data/test_set/images/")
#color features
library("EBImage")
#img_names<-list.files("../data/image/images/")
img-names<-list.files("../data/test_set/images/")
img_names<-list.files("../data/test_set/images/")
#color features
library("EBImage")
#img_names<-list.files("../data/image/images/")
img_names<-list.files("../data/test_set/images/")
Rbin<-seq(0,1,length.out =  10)
Gbin<-seq(0,1,length.out = 10)
Bbin<-seq(0,1,length.out = 10)
Hbin<-seq(0,1,length.out =  10)
Sbin<-seq(0,1,length.out = 10)
Vbin<-seq(0,0.005,length.out = 10)
##RGB features
rgb_features<-data.frame(matrix(NA,3000,1001))
colnames(rgb_features)<-c('Image',paste('rbg_',1:1000,sep=""))
rgb_features$Image<-img_names
hsv_features<-data.frame(matrix(NA,3000,1001))
colnames(hsv_features)<-c('Image',paste('hsv_',1:1000,sep=""))
hsv_features$Image<-img_names
for(i in 1:3000){
print(i)
#img<-readImage(paste("../data/image/images/",img_names[i],sep=""))
img<-readImage(paste("../data/test_set",img_names[i],sep=""))
if(length(dim(img))!=3){
next
}
img<-resize(img,256,256)
img_mat<-imageData(img)
### RGB
rgb_mat<-img_mat
rgb_df=as.data.frame(table(factor(findInterval(rgb_mat[,,1],Rbin),levels = 1:10),
factor(findInterval(rgb_mat[,,2],Gbin),levels = 1:10),
factor(findInterval(rgb_mat[,,3],Bbin),levels = 1:10)))
rgb_features[i,2:1001]<-rgb_df$Freq/(256^2)
### HSV
dim(img_mat)<-c(256*256,3)
hsv_mat<-rgb2hsv(t(img_mat))
hsv_df=as.data.frame(table(factor(findInterval(hsv_mat[1,],Hbin),levels = 1:10),
factor(findInterval(hsv_mat[2,],Sbin),levels = 1:10),
factor(findInterval(hsv_mat[3,],Vbin),levels = 1:10)))
hsv_features[i,2:1001]<-hsv_df$Freq/(256^2)
}
color_features<-merge(rgb_features,hsv_features,by.x = "Image",by.y="Image")
#write.csv(color_features,"../output/color_features.csv",row.names = F)
write.csv(color_features,"../output/color_features_test.csv",row.names = F)
#color features
library("EBImage")
#img_names<-list.files("../data/image/images/")
img_names<-list.files("../data/test_set/images/")
Rbin<-seq(0,1,length.out =  10)
Gbin<-seq(0,1,length.out = 10)
Bbin<-seq(0,1,length.out = 10)
Hbin<-seq(0,1,length.out =  10)
Sbin<-seq(0,1,length.out = 10)
Vbin<-seq(0,0.005,length.out = 10)
##RGB features
rgb_features<-data.frame(matrix(NA,3000,1001))
colnames(rgb_features)<-c('Image',paste('rbg_',1:1000,sep=""))
rgb_features$Image<-img_names
hsv_features<-data.frame(matrix(NA,3000,1001))
colnames(hsv_features)<-c('Image',paste('hsv_',1:1000,sep=""))
hsv_features$Image<-img_names
for(i in 1:3000){
print(i)
#img<-readImage(paste("../data/image/images/",img_names[i],sep=""))
img<-readImage(paste("../data/test_set/images/",img_names[i],sep=""))
if(length(dim(img))!=3){
next
}
img<-resize(img,256,256)
img_mat<-imageData(img)
### RGB
rgb_mat<-img_mat
rgb_df=as.data.frame(table(factor(findInterval(rgb_mat[,,1],Rbin),levels = 1:10),
factor(findInterval(rgb_mat[,,2],Gbin),levels = 1:10),
factor(findInterval(rgb_mat[,,3],Bbin),levels = 1:10)))
rgb_features[i,2:1001]<-rgb_df$Freq/(256^2)
### HSV
dim(img_mat)<-c(256*256,3)
hsv_mat<-rgb2hsv(t(img_mat))
hsv_df=as.data.frame(table(factor(findInterval(hsv_mat[1,],Hbin),levels = 1:10),
factor(findInterval(hsv_mat[2,],Sbin),levels = 1:10),
factor(findInterval(hsv_mat[3,],Vbin),levels = 1:10)))
hsv_features[i,2:1001]<-hsv_df$Freq/(256^2)
}
color_features<-merge(rgb_features,hsv_features,by.x = "Image",by.y="Image")
#write.csv(color_features,"../output/color_features.csv",row.names = F)
write.csv(color_features,"../output/color_features_test.csv",row.names = F)
tm_gbm_train <- system.time(gbm_color_fit_subset <- gbm_train(train_df5,train_df5$label, n.trees=441, run.cv = F))
test_df<-read.csv("../output/color_features_test.csv",as.is = T)
tm_gbm_predict <- system.time(pred_label <- gbm_test(gbm_sift_fit_subset,test_df))
pred_label <- gbm_test(gbm_color_fit_subset,test_df5)
pred_label <- pred_label + 1
write.csv(pred_label,"../output/gbm_color_test_label-xy.csv",row.names = F)
test_df<-data.frame(test_df[,-1])
View(test_df)
tm_gbm_predict <- system.time(pred_label <- gbm_test(gbm_sift_fit_subset,test_df))
pred_label <- gbm_test(gbm_color_fit_subset,test_df5)
pred_label <- pred_label + 1
write.csv(pred_label,"../output/gbm_color_test_label-xy.csv",row.names = F)
tm_gbm_predict
test_df<-read.csv("../output/color_features_test.csv",as.is = T)
test_df<-data.frame(test_df[,-1])
tm_gbm_predict <- system.time(pred_label <- gbm_test(gbm_color_fit_subset,test_df))
pred_label <- gbm_test(gbm_color_fit_subset,test_df5)
pred_label <- pred_label + 1
write.csv(pred_label,"../output/gbm_color_test_label-xy.csv",row.names = F)
tm_gbm_predict
