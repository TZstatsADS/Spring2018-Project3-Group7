speech.df[,-1]=replace(speech.df[,-1], speech.df[,-1]<1/15, 0.001)
speech.df[,-1]=f.smooth.topic(x=speech.df[,1], y=speech.df[,-1])
plot.stacked(speech.df[,1], speech.df[,topic.plot+1],
xlab="Sentences", ylab="Topic share", main="Barack Obama, Nomination")
speech.df=tbl_df(corpus.list.df)%>%filter(File=="DonaldJTrump", type=="nomin")%>%select(sent.id, Economy:Legislation)
speech.df=as.matrix(speech.df)
speech.df[,-1]=replace(speech.df[,-1], speech.df[,-1]<1/15, 0.001)
speech.df[,-1]=f.smooth.topic(x=speech.df[,1], y=speech.df[,-1])
plot.stacked(speech.df[,1], speech.df[,topic.plot+1],
xlab="Sentences", ylab="Topic share", main="Donald Trump, Nomination")
# [1] "Economy"         "America"         "Defense"         "Belief"
# [5] "Election"        "Patriotism"      "Unity"           "Government"
# [9] "Reform"          "Temporal"        "WorkingFamilies" "Freedom"
# [13] "Equality"        "Misc"            "Legislation"
par(mfrow=c(5, 1), mar=c(1,1,2,0), bty="n", xaxt="n", yaxt="n")
topic.plot=c(1, 13, 14, 15, 8, 9, 12)
print(topics.hash[topic.plot])
speech.df=tbl_df(corpus.list.df)%>%filter(File=="GeorgeBush", type=="inaug", Term==1)%>%select(sent.id, Economy:Legislation)
speech.df=as.matrix(speech.df)
speech.df[,-1]=replace(speech.df[,-1], speech.df[,-1]<1/15, 0.001)
speech.df[,-1]=f.smooth.topic(x=speech.df[,1], y=speech.df[,-1])
plot.stacked(speech.df[,1], speech.df[,topic.plot+1],
xlab="Sentences", ylab="Topic share", main="George Bush, inaugural Speeches")
speech.df=tbl_df(corpus.list.df)%>%filter(File=="WilliamJClinton", type=="inaug", Term==1)%>%select(sent.id, Economy:Legislation)
speech.df=as.matrix(speech.df)
speech.df[,-1]=replace(speech.df[,-1], speech.df[,-1]<1/15, 0.001)
speech.df[,-1]=f.smooth.topic(x=speech.df[,1], y=speech.df[,-1])
plot.stacked(speech.df[,1], speech.df[,topic.plot+1],
xlab="Sentences", ylab="Topic share", main="William J Clinton, inaugural Speeches")
speech.df=tbl_df(corpus.list.df)%>%filter(File=="GeorgeWBush", type=="inaug", Term==1)%>%select(sent.id, Economy:Legislation)
speech.df=as.matrix(speech.df)
speech.df[,-1]=replace(speech.df[,-1], speech.df[,-1]<1/15, 0.001)
speech.df[,-1]=f.smooth.topic(x=speech.df[,1], y=speech.df[,-1])
plot.stacked(speech.df[,1], speech.df[,topic.plot+1],
xlab="Sentences", ylab="Topic share", main="George W. Bush, inaugural Speeches")
speech.df=tbl_df(corpus.list.df)%>%filter(File=="BarackObama", type=="inaug", Term==1)%>%select(sent.id, Economy:Legislation)
speech.df=as.matrix(speech.df)
speech.df[,-1]=replace(speech.df[,-1], speech.df[,-1]<1/15, 0.001)
speech.df[,-1]=f.smooth.topic(x=speech.df[,1], y=speech.df[,-1])
plot.stacked(speech.df[,1], speech.df[,topic.plot+1],
xlab="Sentences", ylab="Topic share", main="Barack Obama, inaugural Speeches")
# [1] "Economy"         "America"         "Defense"         "Belief"
# [5] "Election"        "Patriotism"      "Unity"           "Government"
# [9] "Reform"          "Temporal"        "WorkingFamilies" "Freedom"
# [13] "Equality"        "Misc"            "Legislation"
par(mfrow=c(5, 1))
topic.plot=c(1, 13, 14, 15, 8, 9, 12)
print(topics.hash[topic.plot])
speech.df=tbl_df(corpus.list.df)%>%filter(File=="RonaldReagan", type=="farewell")%>%select(sent.id, Economy:Legislation)
speech.df=as.matrix(speech.df)
speech.df[,-1]=replace(speech.df[,-1], speech.df[,-1]<1/15, 0.001)
speech.df[,-1]=f.smooth.topic(x=speech.df[,1], y=speech.df[,-1])
plot.stacked(speech.df[,1], speech.df[,topic.plot+1],
xlab="Sentences", ylab="Topic share", main="Ronald Reagan, Farewell Speeches")
speech.df=tbl_df(corpus.list.df)%>%filter(File=="GeorgeBush", type=="farewell")%>%select(sent.id, Economy:Legislation)
speech.df=as.matrix(speech.df)
speech.df[,-1]=replace(speech.df[,-1], speech.df[,-1]<1/15, 0.001)
speech.df[,-1]=f.smooth.topic(x=speech.df[,1], y=speech.df[,-1])
plot.stacked(speech.df[,1], speech.df[,topic.plot+1],
xlab="Sentences", ylab="Topic share", main="George Bush, Farewell Speeches")
speech.df=tbl_df(corpus.list.df)%>%filter(File=="WilliamJClinton", type=="farewell")%>%select(sent.id, Economy:Legislation)
speech.df=as.matrix(speech.df)
speech.df[,-1]=replace(speech.df[,-1], speech.df[,-1]<1/15, 0.001)
speech.df[,-1]=f.smooth.topic(x=speech.df[,1], y=speech.df[,-1])
plot.stacked(speech.df[,1], speech.df[,topic.plot+1],
xlab="Sentences", ylab="Topic share", main="William J. Clinton, Farewell Speeches")
speech.df=tbl_df(corpus.list.df)%>%filter(File=="GeorgeWBush", type=="farewell")%>%select(sent.id, Economy:Legislation)
speech.df=as.matrix(speech.df)
speech.df[,-1]=replace(speech.df[,-1], speech.df[,-1]<1/15, 0.001)
speech.df[,-1]=f.smooth.topic(x=speech.df[,1], y=speech.df[,-1])
plot.stacked(speech.df[,1], speech.df[,topic.plot+1],
xlab="Sentences", ylab="Topic share", main="George W Bush, Farewell Speeches")
speech.df=tbl_df(corpus.list.df)%>%filter(File=="BarackObama", type=="farewell")%>%select(sent.id, Economy:Legislation)
speech.df=as.matrix(speech.df)
speech.df[,-1]=replace(speech.df[,-1], speech.df[,-1]<1/15, 0.001)
speech.df[,-1]=f.smooth.topic(x=speech.df[,1], y=speech.df[,-1])
plot.stacked(speech.df[,1], speech.df[,topic.plot+1],
xlab="Sentences", ylab="Topic share", main="Barack Obama, Farewell Speeches")
speech.df=tbl_df(corpus.list.df)%>%filter(type=="nomin", word.count<20)%>%select(sentences, Economy:Legislation)
as.character(speech.df$sentences[apply(as.data.frame(speech.df[,-1]), 2, which.max)])
names(speech.df)[-1]
presid.summary=tbl_df(corpus.list.df)%>%
filter(type=="inaug", File%in%sel.comparison)%>%
select(File, Economy:Legislation)%>%
group_by(File)%>%
summarise_each(funs(mean))
presid.summary=as.data.frame(presid.summary)
rownames(presid.summary)=as.character((presid.summary[,1]))
km.res=kmeans(scale(presid.summary[,-1]), iter.max=200,
5)
fviz_cluster(km.res,
stand=T, repel= TRUE,
data = presid.summary[,-1],
show.clust.cent=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library("qdap")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library("rvest")
library("rvest")
library("tibble")
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
source("../lib/plotstacked.R")
source("../lib/speechFuncs.R")
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
print(R.version)
install.packages(c("adabag", "backports", "boot", "caret", "ddalpha", "digest", "DRR", "DT", "foreach", "glue", "hms", "ISLR", "iterators", "itsmr", "knitr", "lava", "lazyeval", "lme4", "lubridate", "MASS", "Matrix", "mgcv", "mvtnorm", "purrr", "Rcpp", "recipes", "reshape2", "rlang", "rmarkdown", "robustbase", "rpart", "rprojroot", "stringi", "tibble", "tidyselect", "timeDate", "withr", "xml2", "yaml"))
install.packages(c("adabag", "backports", "boot", "caret", "ddalpha", "digest", "DRR", "DT", "foreach", "glue", "hms", "ISLR", "iterators", "itsmr", "knitr", "lava", "lazyeval", "lme4", "lubridate", "MASS", "Matrix", "mgcv", "mvtnorm", "purrr", "Rcpp", "recipes", "reshape2", "rlang", "rmarkdown", "robustbase", "rpart", "rprojroot", "stringi", "tibble", "tidyselect", "timeDate", "withr", "xml2", "yaml"))
install.packages(c("adabag", "backports", "boot", "caret", "ddalpha", "digest", "DRR", "DT", "foreach", "glue", "hms", "ISLR", "iterators", "itsmr", "knitr", "lava", "lazyeval", "lme4", "lubridate", "MASS", "Matrix", "mgcv", "mvtnorm", "purrr", "Rcpp", "recipes", "reshape2", "rlang", "rmarkdown", "robustbase", "rpart", "rprojroot", "stringi", "tibble", "tidyselect", "timeDate", "withr", "xml2", "yaml"))
install.packages(c("adabag", "backports", "boot", "caret", "ddalpha", "digest", "DRR", "DT", "foreach", "glue", "hms", "ISLR", "iterators", "itsmr", "knitr", "lava", "lazyeval", "lme4", "lubridate", "MASS", "Matrix", "mgcv", "mvtnorm", "purrr", "Rcpp", "recipes", "reshape2", "rlang", "rmarkdown", "robustbase", "rpart", "rprojroot", "stringi", "tibble", "tidyselect", "timeDate", "withr", "xml2", "yaml"))
install.packages(c("adabag", "backports", "boot", "caret", "ddalpha", "digest", "DRR", "DT", "foreach", "glue", "hms", "ISLR", "iterators", "itsmr", "knitr", "lava", "lazyeval", "lme4", "lubridate", "MASS", "Matrix", "mgcv", "mvtnorm", "purrr", "Rcpp", "recipes", "reshape2", "rlang", "rmarkdown", "robustbase", "rpart", "rprojroot", "stringi", "tibble", "tidyselect", "timeDate", "withr", "xml2", "yaml"))
install.packages(c("adabag", "backports", "boot", "caret", "ddalpha", "digest", "DRR", "DT", "foreach", "glue", "hms", "ISLR", "iterators", "itsmr", "knitr", "lava", "lazyeval", "lme4", "lubridate", "MASS", "Matrix", "mgcv", "mvtnorm", "purrr", "Rcpp", "recipes", "reshape2", "rlang", "rmarkdown", "robustbase", "rpart", "rprojroot", "stringi", "tibble", "tidyselect", "timeDate", "withr", "xml2", "yaml"))
install.packages(c("adabag", "backports", "boot", "caret", "ddalpha", "digest", "DRR", "DT", "foreach", "glue", "hms", "ISLR", "iterators", "itsmr", "knitr", "lava", "lazyeval", "lme4", "lubridate", "MASS", "Matrix", "mgcv", "mvtnorm", "purrr", "Rcpp", "recipes", "reshape2", "rlang", "rmarkdown", "robustbase", "rpart", "rprojroot", "stringi", "tibble", "tidyselect", "timeDate", "withr", "xml2", "yaml"))
install.packages(c("adabag", "backports", "boot", "caret", "ddalpha", "digest", "DRR", "DT", "foreach", "glue", "hms", "ISLR", "iterators", "itsmr", "knitr", "lava", "lazyeval", "lme4", "lubridate", "MASS", "Matrix", "mgcv", "mvtnorm", "purrr", "Rcpp", "recipes", "reshape2", "rlang", "rmarkdown", "robustbase", "rpart", "rprojroot", "stringi", "tibble", "tidyselect", "timeDate", "withr", "xml2", "yaml"))
install.packages(c("adabag", "backports", "boot", "caret", "ddalpha", "digest", "DRR", "DT", "foreach", "glue", "hms", "ISLR", "iterators", "itsmr", "knitr", "lava", "lazyeval", "lme4", "lubridate", "MASS", "Matrix", "mgcv", "mvtnorm", "purrr", "Rcpp", "recipes", "reshape2", "rlang", "rmarkdown", "robustbase", "rpart", "rprojroot", "stringi", "tibble", "tidyselect", "timeDate", "withr", "xml2", "yaml"))
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library("rvest")
library("tibble")
# You may need to run
# sudo ln -f -s $(/usr/libexec/java_home)/jre/lib/server/libjvm.dylib /usr/local/lib
# in order to load qdap
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
source("../lib/plotstacked.R")
source("../lib/speechFuncs.R")
knitr::opts_chunk$set(echo = TRUE)
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library("rvest")
library("tibble")
# You may need to run
# sudo ln -f -s $(/usr/libexec/java_home)/jre/lib/server/libjvm.dylib /usr/local/lib
# in order to load qdap
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
source("../lib/plotstacked.R")
source("../lib/speechFuncs.R")
install.packages("rJava")
install.packages("rJava")
knitr::opts_chunk$set(echo = TRUE)
library("rJava")
knitr::opts_chunk$set(echo = TRUE)
1000/exp(4*0.042)
(845.3538-828)/828
sum(logr)
set.seed(2012)
n=253
par(mfrow=c(3,3))
for (i in (1:9)){
logr = rnorm(n, 0.05 / 253, 0.2 / sqrt(253))
price = c(120, 120 * exp(cumsum(logr)))
plot(price, type = "b")
}
#The mean of the log-returns for 1 year is
sum(logr)
#The standard deviation of the log-returns for 1 year is
sd(logr)
shiny::runApp('Desktop/5243/Spring2018-Project2-Group3/app')
runApp('Desktop/5243/Spring2018-Project2-Group3/app')
runApp('Desktop/5243/Spring2018-Project2-Group3/app')
runApp('Desktop/5243/Spring2018-Project2-Group3/app')
runApp('Desktop/5243/Spring2018-Project2-Group3/app')
runApp('Desktop/5243/Spring2018-Project2-Group3/app')
runApp('Desktop/5243/Spring2018-Project2-Group3/app')
runApp('Desktop/5243/Spring2018-Project2-Group3/app')
runApp('Desktop/5243/Spring2018-Project2-Group3/app')
runApp('Desktop/5243/Spring2018-Project2-Group3/app')
runApp('Desktop/5243/Spring2018-Project2-Group3/app')
runApp('Desktop/5243/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
?cheboxinput
?checkBoxInput
?checkboxInput
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
?radio
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
shiny::runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
?background-size
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
shiny::runApp('Documents/Spring2018-Project2-Group3/app')
shiny::runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
runApp('Documents/Spring2018-Project2-Group3/app')
shiny::runApp('Documents/Spring2018-Project2-Group3/app')
knitr::opts_chunk$set(echo = TRUE)
pnorm(0.002-0.016, mean = 0.002, sd = 0.016)
1000000*(0.016*qnorm(0.1)-0.002)
qnorm(0.1)
1000000*(0.016*(-qnorm(0.1))-0.002)
1000000*(0.2*(-qnorm(0.05))-0.1)
1000*(0.2*(-qnorm(0.05))-0.1)
-qnorm(0.05)
1000*(0.016*(qt(0.1, df=2) - 0.002))
qt(0.1, df=2)
1000*(0.016*(qt(0.1, df=5) - 0.002))
0.15*qt(0.05,df=5)-0.05
0.15*(-qt(0.05,df=5))-0.05
1000*(0.016*(-qt(0.1, df=2) - 0.002))
1000*(0.016*(-qt(0.1, df=5) - 0.002))
mu <- T(0.01, 0.005)
mu <- c(0.01, 0.005)
mu <- Tmu
mu <- t(mu)
mu
mu <- c(0.01, 0.005)
mu
w <- (1/2, 1/2)
w <- c(1/2, 1/2)
mu*w
mu <- matrix(0.01, 0.005)
mu <- matrix(c(0.01, 0.005),2,1)
mu
w  <- matrix(c(1/2, 1/2),2,1)
mu*w
t(mu)*w
t(mu)%*%w
cov <- matrix(c(0.05^2, 0, 0, 0.01^2), 2, 2)
cov
(t(w)%*%cov%*%w)^(1/2)
sqrt((500*(0.05*(-qnotm(0.05, mean = 0.01, sd = 0.05)) - 0.01))^2+
(1000*(0.05*(-qnotm(0.01, mean = 0.005, sd = 0.01)) - 0.005))^2)
sqrt((500*(0.05*(-qnorm(0.05, mean = 0.01, sd = 0.05)) - 0.01))^2+
(1000*(0.05*(-qnorm(0.01, mean = 0.005, sd = 0.01)) - 0.005))^2)
(500*(0.05*(-qnorm(0.05, mean = 0.01, sd = 0.05)) - 0.01))^2
0.05*(-qnorm(0.05, mean = 0.01, sd = 0.05)) - 0.01
sqrt((500*(0.05*(-qnorm(0.05)) - 0.01))^2+
(1000*(0.05*(-qnorm(0.01)) - 0.005))^2)
var1 <- 500*(0.05*(-qnorm(0.05)) - 0.01)
var2 <- 1000*(0.05*(-qnorm(0.01)) - 0.005)
sqrt(var1^2+var2^2)
sqrt(var1^2 + var2^2 + 2*0.3*var1*var2)
sqrt(var1^2 + var2^2 - 2*0.3*var1*var2)
f <- function(x) {abs(x+1)/(x^2+1)^2}
integrate(f, lower = -Inf, upper = Inf)
z <- integrate(f, lower = -Inf, upper = Inf)
z
z$value
?quantile
quantile(f, 0.05)
f <- function(x) {abs(x+1)/(x^2+1)^2}
quantile(f, 0.05)
quantile(f(x), 0.05)
f <- function(x) {abs(x+1)/(x^2+1)^2}
z <- integrate(f, lower = -Inf, upper = Inf)
z$value
f <- function(x) {abs(x+1)/(x^2+1)^2}
z <- integrate(f, lower = -Inf, upper = Inf)$value
z
1000000*(0.016*(-qnorm(0.1))-0.002)
1000*(0.2*(-qnorm(0.05))-0.1)
1000*(0.016*(-qt(0.1, df=2) - 0.002))
1000*(0.016*(-qt(0.1, df=2) - 0.002))
1000*(0.016*(-qt(0.1, df=2) - 0.002))
1000*(0.016*(-qt(0.1, df=2)) - 0.002)
1000*(0.016*(-qt(0.1, df=5)) - 0.002)
var1 <- 500*(0.05*(-qnorm(0.05)) - 0.01)
var2 <- 1000*(0.05*(-qnorm(0.01)) - 0.005)
sqrt(var1^2+var2^2)
var1 <- 500*(0.05*(-qnorm(0.05)) - 0.01)
var2 <- 1000*(0.05*(-qnorm(0.01)) - 0.005)
sqrt(var1^2+var2^2)
var1 <- 500*(0.05*(-qnorm(0.05)) - 0.01)
var2 <- 1000*(0.05*(-qnorm(0.01)) - 0.005)
mean <- (1/3)*0.01 +(2/3)*0.005
sd <- sqrt((1/3)*(0.05^2) + (2/3)*(0.01^2))
1500*(sd*(-qnorm(0.05))-mean)
mean <- (1/3)*0.01 +(2/3)*0.005
sd <- sqrt(((1/3)*0.05)^2 + ((2/3)*0.01)^2)
1500*(sd*(-qnorm(0.05))-mean)
sdnew <- squrt(sd^2+2*0.3*(1/3)*0.05*(2/3)*0.01)
sdnew <- sqrt(sd^2+2*0.3*(1/3)*0.05*(2/3)*0.01)
sdnew <- sqrt(sd^2+2*0.3*(1/3)*0.05*(2/3)*0.01)
1500*(sdnew*(-qnorm(0.05))-mean)
sd2 <- sqrt(sd^2-2*0.3*(1/3)*0.05*(2/3)*0.01)
1500*(sd2*(-qnorm(0.05))-mean)
sd_a <- 1/2*0.18
sd_b <- 1/2*0.18
sd_p <- sqrt(sd_a^2+sd_b^2+2*0.2*sd_a*sd_b)
mean_p <- 1/2*0.04+1/2*0.04
sd_p
setwd("~/Documents/Spring2018-Project3-Group7/doc")
library(nnet)
library(dplyr)
library(data.table)
train.lg <- function(dat_train, label_train, par = NULL){
### Train a multinomial logistic regression using processed features from training images
### Input:
###  -  processed features from images,
###  -  class labels for training images
### Output: training model specification
### combine the features and the labels together
mydata<-cbind(dat_train,label_train)
label_train<-factor(label_train)
### train with multinomial logistic regression model
if(is.null(par)){
maxit <- 100
} else {
maxit <- par$maxit
}
fit_lg <- multinom(label_train~., data = mydata[,-1], MaxNWts = 20000, maxit = maxit)
return(list(fit=fit_lg))
}
test.lg <- function(fit_train, dat_test){
### Fit the classfication model with testing data
### Input:
###  - the fitted classification model using training data
###  -  processed features from testing images
### Output: training model specification
pred <- predict(fit_train$fit, dat_test[,-1])
return(pred)
}
cv.function <- function(X.train, y.train, iter, K){
set.seed(0)
n <- length(y.train)
n.fold <- floor(n/K)
s <- sample(rep(1:K, c(rep(n.fold, K-1), n-(K-1)*n.fold)))
cv.error <- rep(NA, K)
for (i in 1:K){
train.data <- X.train[s != i,]
train.label <- y.train[s != i]
test.data <- X.train[s == i,]
test.label <- y.train[s == i]
par <- list(maxit=iter)
fit <- train.lg(train.data, train.label, par)
pred <- test.lg(fit, test.data)
cv.error[i] <- mean(pred != test.label)
}
return(c(mean(cv.error),sd(cv.error)))
}
## load data
img_labels<-read.csv("../data/image/label_train.csv")
colnames(img_labels)=c("Image","labels")
gray<-read.csv("../output/gray_features.csv",as.is = F)
train_data<-gray[train_index,]
test_data<-gray[-train_index,]
set.seed(90)
train_index<-sample(1:3000,floor(nrow(img_labels)*0.75))
train_labels<-img_labels[train_index,3]
test_labels<-img_labels[-train_index,3]
train_data<-gray[train_index,]
test_data<-gray[-train_index,]
# train the model with the entire training set
tm_train <- system.time(fit_train <- train.lg(train_data, train_labels, 11))
pred_train <- test.lg(fit_train, train_data)
train.error <- mean(pred_train != train_labels)
train.error #0.000444
1-train.error
par_best<-11 # maxit=11 is the best
# train the model with the entire training set
tm_train <- system.time(fit_train <- train.lg(train_data, train_labels, par_best))
pred_train <- test.lg(fit_train, train_data)
train.error <- mean(pred_train != train_labels)
train.error #0.000444
1-train.error
### Make p
par_best <- list(maxit=11)
# train the model with the entire training set
tm_train <- system.time(fit_train <- train.lg(train_data, train_labels, par_best))
pred_train <- test.lg(fit_train, train_data)
train.error <- mean(pred_train != train_labels)
train.error #0.000444
1-train.error
tm_test <- system.time(pred_test <- test.lg(fit_train, test_data))
test.error <- mean(pred_test != test_labels)
test.error #0.572
1-test.error
